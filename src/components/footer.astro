---
import Link from "./ui/link.astro";
import { Icon } from "astro-icon/components";
import { getLanguage, getTranslation } from "../utils/language";

const currentLang = getLanguage();

const footerLinks = [
  {
    titleKey: "footer.product.title",
    links: [
      { textKey: "footer.product.docs", href: "/docs" },
      { textKey: "footer.product.downloads", href: "/downloads" },
      { textKey: "footer.product.forum", href: "/forum" },
    ],
  },
  {
    titleKey: "footer.company.title",
    links: [
      { textKey: "footer.company.careers", href: "/careers" },
      { textKey: "footer.company.security", href: "/security" },
      { textKey: "footer.company.privacy", href: "/privacy" },
    ],
  },
  {
    titleKey: "footer.legal.title",
    links: [
      { textKey: "footer.legal.terms", href: "/terms" },
      { textKey: "footer.legal.changelog", href: "/changelog" },
    ],
  },
];

const socialLinks = [
  { name: "GitHub", href: "https://github.com/ceoweggo/Corebrain", icon: "bx:bxl-github" },
  { name: "LinkedIn", href: "https://linkedin.com/in/ruben-ayuso", icon: "bx:bxl-linkedin" },
];
---

<footer class="mt-24 bg-gradient-to-b from-gray-50 to-white border-t border-gray-100 dark:from-gray-900 dark:to-gray-800 dark:border-gray-800">
  <div class="max-w-7xl mx-auto px-6 py-12">
    <div class="flex flex-col md:flex-row justify-between">
      <div class="mb-8 md:mb-0">
        <a href="/" class="text-lg mb-4 block">
          <span class="font-bold text-slate-800 dark:text-white">Ete</span><span class="text-slate-500 dark:text-slate-400">data</span>
        </a>
        <p class="text-sm text-gray-500 dark:text-gray-400">© {new Date().getFullYear()} Etedata. <span data-i18n="footer.copyright">{getTranslation('footer.copyright')}</span></p>
        <p class="mt-2 text-sm text-gray-500 dark:text-gray-400"><span data-i18n="footer.poweredBy">{getTranslation('footer.poweredBy')}</span> <a href="https://globodain.com">Globodain Technology Corporation</a>.</p>

        <div class="flex space-x-4 mt-4">
          {socialLinks.map((link) => (
            <a
              href={link.href}
              target="_blank"
              rel="noopener noreferrer"
              class="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white">
              <Icon name={link.icon} class="w-5 h-5" />
              <span class="sr-only">{link.name}</span>
            </a>
          ))}
        </div>
      </div>

      <div class="grid grid-cols-2 md:grid-cols-3 gap-8 md:gap-12">
        {footerLinks.map((section) => (
          <div>
            <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-3" data-i18n={section.titleKey}>
              {getTranslation(section.titleKey)}
            </h3>
            <ul class="space-y-2">
              {section.links.map((link) => (
                <li>
                  <a href={link.href} class="text-sm text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:underline" data-i18n={link.textKey}>
                    {getTranslation(link.textKey)}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>

      <div class="mt-8 md:mt-0 flex flex-col items-end space-y-4">
        <div class="flex items-center space-x-2">
          <button
            id="theme-toggle"
            class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background border border-gray-200 hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2 dark:border-gray-700">
            <Icon name="heroicons:computer-desktop" class="w-4 h-4 mr-2" />
            <Icon name="heroicons:sun" class="w-4 h-4 dark:hidden" />
            <Icon name="heroicons:moon" class="w-4 h-4 hidden dark:block" />
          </button>
          <button
            id="language-toggle"
            class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background border border-gray-200 hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2 dark:border-gray-700"
            data-current-lang={currentLang}>
            <Icon name="heroicons:globe-alt" class="w-4 h-4 mr-2" />
            <span class="es-text" data-lang="es">ES</span>
            <span class="en-text hidden" data-lang="en">EN</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</footer>

<script>
  import { getTheme, setTheme, toggleTheme } from '../utils/theme';
  import { getLanguage, setLanguage, updateTranslations } from '../utils/language';

  function initializeLanguageUI() {
    const currentLang = getLanguage();
    const languageToggle = document.getElementById('language-toggle');
    const esText = languageToggle?.querySelector('.es-text');
    const enText = languageToggle?.querySelector('.en-text');

    if (currentLang === 'en') {
      esText?.classList.add('hidden');
      enText?.classList.remove('hidden');
      languageToggle?.setAttribute('data-current-lang', 'en');
    } else {
      esText?.classList.remove('hidden');
      enText?.classList.add('hidden');
      languageToggle?.setAttribute('data-current-lang', 'es');
    }
  }

  function toggleLanguage() {
    const currentLang = getLanguage();
    const newLang = currentLang === 'es' ? 'en' : 'es';
    setLanguage(newLang);
    initializeLanguageUI();
  }

  // Inicialización cuando se carga el documento
  document.addEventListener('DOMContentLoaded', () => {
    // Configuración inicial del tema
    const initialTheme = getTheme();
    setTheme(initialTheme);

    // Configuración inicial del idioma
    initializeLanguageUI();
    updateTranslations();

    // Manejador del botón de idioma
    const languageToggle = document.getElementById('language-toggle');
    if (languageToggle) {
      languageToggle.addEventListener('click', toggleLanguage);
    }

    // Manejador del botón de tema
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', toggleTheme);
    }
  });

  // Escuchar cambios de idioma
  document.addEventListener('languageChanged', () => {
    updateTranslations();
    initializeLanguageUI();
  });
</script>
