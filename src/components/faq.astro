---
// @ts-ignore
import { Icon } from "astro-icon/components";
import { getLanguage, getTranslation } from "../utils/language";

// Get initial translations for SSR
const defaultLang = 'es';
const translations = {
  title: getTranslation('faq.title', defaultLang),
  subtitle: getTranslation('faq.subtitle', defaultLang),
  faqs: Array.from({ length: 7 }, (_, i) => ({
    question: getTranslation(`faq.${i + 1}.question`, defaultLang),
    answer: getTranslation(`faq.${i + 1}.answer`, defaultLang)
  })),
  aria: {
    expandMore: getTranslation('aria.expandMore', defaultLang),
    expandLess: getTranslation('aria.expandLess', defaultLang)
  }
};

const faqs = translations.faqs;
---

<div class="mt-24">
  <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight text-center" data-i18n="faq.title">
    {translations.title}
  </h2>
  <p class="text-lg mt-4 text-slate-600 text-center max-w-3xl mx-auto" data-i18n="faq.subtitle">
    {translations.subtitle}
  </p>

  <div class="max-w-4xl mx-auto mt-16">
    {
      faqs.map((item, index) => (
        <div class="mb-6">
          <button 
            class="flex justify-between items-center w-full p-4 text-left bg-white rounded-lg border border-gray-200 hover:bg-gray-50 transition"
            aria-expanded="false"
            aria-controls={`faq-${index}`}
            aria-label={translations.aria.expandMore}
            data-i18n-aria-label="aria.expandMore"
          >
            <span class="font-semibold text-gray-800" data-i18n={`faq.${index + 1}.question`}>{item.question}</span>
            <Icon class="text-gray-500 w-5 h-5 transform transition-transform" name="bx:bx-chevron-down" />
          </button>
          <div 
            id={`faq-${index}`} 
            class="hidden p-4 bg-gray-50 rounded-b-lg"
            data-i18n={`faq.${index + 1}.answer`}
          >
            <p class="text-slate-600">{item.answer}</p>
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  import { getLanguage, getTranslation, updateTranslations } from '../utils/language';

  function initializeFAQ() {
    const faqButtons = document.querySelectorAll('[aria-controls^="faq-"]');
    
    faqButtons.forEach(button => {
      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        const targetId = button.getAttribute('aria-controls');
        const target = document.getElementById(targetId);
        const icon = button.querySelector('svg');
        
        // Toggle expanded state
        button.setAttribute('aria-expanded', !isExpanded);
        
        // Update aria-label based on state
        const ariaKey = isExpanded ? 'aria.expandMore' : 'aria.expandLess';
        button.setAttribute('aria-label', getTranslation(ariaKey));
        button.setAttribute('data-i18n-aria-label', ariaKey);
        
        // Toggle content visibility
        if (target) {
          target.classList.toggle('hidden');
        }
        
        // Rotate icon
        if (icon) {
          icon.classList.toggle('rotate-180');
        }
      });
    });
  }

  // Initialize when document loads
  document.addEventListener('DOMContentLoaded', () => {
    initializeFAQ();
    updateTranslations();
  });

  // Update translations when language changes
  document.addEventListener('languageChanged', () => {
    // Update text content
    updateTranslations();
    
    // Update aria-labels
    document.querySelectorAll('[data-i18n-aria-label]').forEach(element => {
      const key = element.getAttribute('data-i18n-aria-label');
      if (key) {
        element.setAttribute('aria-label', getTranslation(key));
      }
    });
  });
</script> 