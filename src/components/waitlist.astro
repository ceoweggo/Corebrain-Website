---
import { Icon } from "astro-icon/components";
import { getLanguage, getTranslation } from "../utils/language";

interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Get initial translations for SSR
const defaultLang = 'es';
const translations = {
  title: getTranslation('waitlist.title', defaultLang),
  description: getTranslation('waitlist.description', defaultLang),
  emailLabel: getTranslation('waitlist.email.label', defaultLang),
  emailPlaceholder: getTranslation('waitlist.email.placeholder', defaultLang),
  buttonJoin: getTranslation('waitlist.button.join', defaultLang),
  features: {
    feature1: {
      title: getTranslation('waitlist.feature.1.title', defaultLang),
      description: getTranslation('waitlist.feature.1.description', defaultLang)
    },
    feature2: {
      title: getTranslation('waitlist.feature.2.title', defaultLang),
      description: getTranslation('waitlist.feature.2.description', defaultLang)
    }
  }
};
---

<section id="waitlist" class:list={["relative isolate overflow-hidden bg-gray-900 py-24 sm:py-32 lg:py-40", className]}>
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    <div class="mx-auto grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-2">
      <div class="max-w-xl lg:max-w-lg">
        <h2 class="text-3xl font-bold tracking-tight text-white sm:text-4xl" data-i18n="waitlist.title">
          {translations.title}
        </h2>
        <p class="mt-4 text-lg leading-8 text-gray-300" data-i18n="waitlist.description">
          {translations.description}
        </p>
        <form id="waitlist-form" class="mt-6 flex max-w-md gap-x-4">
          <label for="email-address" class="sr-only">{translations.emailLabel}</label>
          <input
            id="email-address"
            name="email"
            type="email"
            autocomplete="email"
            required
            class="min-w-0 flex-auto rounded-md border-0 bg-white/5 px-3.5 py-2 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-blue-500 sm:text-sm sm:leading-6"
            placeholder={translations.emailPlaceholder}
            aria-label={translations.emailLabel}
          />
          <button
            type="submit"
            id="join-waitlist"
            class="flex-none rounded-md bg-blue-500 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-blue-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500"
            aria-label={translations.buttonJoin}
          >
            {translations.buttonJoin}
          </button>
        </form>
      </div>
      <dl class="grid grid-cols-1 gap-x-8 gap-y-10 sm:grid-cols-2 lg:pt-2">
        <div class="flex flex-col items-start">
          <div class="rounded-md bg-white/5 p-2 ring-1 ring-white/10">
            <Icon name="heroicons:rocket-launch" class="h-6 w-6 text-white" />
          </div>
          <dt class="mt-4 font-semibold text-white" data-i18n="waitlist.feature.1.title">
            {translations.features.feature1.title}
          </dt>
          <dd class="mt-2 leading-7 text-gray-400" data-i18n="waitlist.feature.1.description">
            {translations.features.feature1.description}
          </dd>
        </div>
        <div class="flex flex-col items-start">
          <div class="rounded-md bg-white/5 p-2 ring-1 ring-white/10">
            <Icon name="heroicons:gift" class="h-6 w-6 text-white" />
          </div>
          <dt class="mt-4 font-semibold text-white" data-i18n="waitlist.feature.2.title">
            {translations.features.feature2.title}
          </dt>
          <dd class="mt-2 leading-7 text-gray-400" data-i18n="waitlist.feature.2.description">
            {translations.features.feature2.description}
          </dd>
        </div>
      </dl>
    </div>
  </div>
  <div class="absolute left-1/2 top-0 -z-10 -translate-x-1/2 blur-3xl xl:-top-6" aria-hidden="true">
    <div
      class="aspect-[1155/678] w-[72.1875rem] bg-gradient-to-tr from-[#1d4ed8] to-[#3b82f6] opacity-30"
      style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"
    >
    </div>
  </div>
</section>

<script>
  import { getLanguage, getTranslation, updateTranslations } from '../utils/language';

  function initializeWaitlist() {
    const form = document.getElementById('waitlist-form') as HTMLFormElement;
    const joinWaitlistButton = document.getElementById('join-waitlist') as HTMLButtonElement;
    const emailInput = document.getElementById('email-address') as HTMLInputElement;

    if (form && joinWaitlistButton && emailInput) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const email = emailInput.value;
        
        if (!email || !email.includes('@')) {
          alert(getTranslation('waitlist.error.email'));
          return;
        }

        joinWaitlistButton.disabled = true;
        joinWaitlistButton.textContent = getTranslation('waitlist.button.processing');

        try {
          // SimulaciÃ³n de llamada a API
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          emailInput.value = '';
          joinWaitlistButton.textContent = getTranslation('waitlist.button.registered');
          joinWaitlistButton.classList.remove('bg-blue-500', 'hover:bg-blue-400');
          joinWaitlistButton.classList.add('bg-green-500', 'hover:bg-green-400');
          
          setTimeout(() => {
            joinWaitlistButton.disabled = false;
            joinWaitlistButton.textContent = getTranslation('waitlist.button.join');
            joinWaitlistButton.classList.remove('bg-green-500', 'hover:bg-green-400');
            joinWaitlistButton.classList.add('bg-blue-500', 'hover:bg-blue-400');
          }, 3000);

        } catch (error) {
          console.error('Error:', error);
          alert(getTranslation('waitlist.error.generic'));
          
          joinWaitlistButton.disabled = false;
          joinWaitlistButton.textContent = getTranslation('waitlist.button.join');
        }
      });
    }
  }

  // Initialize when document loads
  document.addEventListener('DOMContentLoaded', () => {
    initializeWaitlist();
    updateTranslations();
  });

  // Update translations when language changes
  document.addEventListener('languageChanged', () => {
    updateTranslations();
    initializeWaitlist(); // Reinitialize to update button text and messages
  });
</script> 